package com.sansantek.sansanmulmul.record.controller;import com.sansantek.sansanmulmul.exception.auth.InvalidTokenException;import com.sansantek.sansanmulmul.record.dto.response.DetailRecordResponse;import com.sansantek.sansanmulmul.user.domain.User;import com.sansantek.sansanmulmul.record.domain.HikingRecord;import com.sansantek.sansanmulmul.record.dto.response.AllRecordResonse;import com.sansantek.sansanmulmul.user.service.UserService;import com.sansantek.sansanmulmul.record.service.RecordService;import io.swagger.v3.oas.annotations.Operation;import io.swagger.v3.oas.annotations.tags.Tag;import lombok.RequiredArgsConstructor;import lombok.extern.slf4j.Slf4j;import org.springframework.http.HttpStatus;import org.springframework.http.ResponseEntity;import org.springframework.security.core.Authentication;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.RestController;import java.util.List;@Slf4j@RestController@RequiredArgsConstructor@RequestMapping("/record")@Tag(name = "등산 기록 컨트롤러", description = "등산 기록의 관한 모든 기능 수행")public class RecordController {    // service    private final UserService userService;    private final RecordService recordService;    @GetMapping("/all")    @Operation(summary = "회원 전체 등산 기록 조회", description = "액세스 토큰을 사용해 회원 전체 등산 기록 조회")    public ResponseEntity<?> getUserRecord            (Authentication authentication) {        HttpStatus status = HttpStatus.ACCEPTED;        try {            // 토큰을 통한 userProviderId 추출            String userProviderId = authentication.getName();            // 해당 사용자 가져오기            User user = userService.getUser(userProviderId);            // 해당 사용자 등산 기록 가져오기            List<AllRecordResonse> userRecordList = recordService.getAllRecords(user.getUserId());            status = HttpStatus.OK; // 200            return new ResponseEntity<>(userRecordList, status);        } catch (InvalidTokenException e) {            log.error("토큰 유효성 검사 실패: {}", e.getMessage());            status = HttpStatus.UNAUTHORIZED; // 401            return new ResponseEntity<>(e.getMessage(), status);        } catch (Exception e) {            log.error("토큰 유효성 검사 실패: {}", e.getMessage());            status = HttpStatus.NOT_FOUND; // 400            return new ResponseEntity<>(e.getMessage(), status);        }    }    @GetMapping("/detail")    @Operation(summary = "회원 해당 등산 기록 상세 조회", description = "액세스 토큰을 사용해 회원의 recordId에 해당하는 등산 기록 상세 조회")    public ResponseEntity<?> getUserRecordDetails            (Authentication authentication,             @RequestParam int recordId) {        HttpStatus status = HttpStatus.ACCEPTED;        try {            // 토큰을 통한 userProviderId 추출            String userProviderId = authentication.getName();            // 해당 사용자 가져오기            User user = userService.getUser(userProviderId);            // 해당 사용자 해당 등산 기록 가져오기            DetailRecordResponse userRecord = recordService.getDetailRecord(recordId);            status = HttpStatus.OK; // 200            return new ResponseEntity<>(userRecord, status);        } catch (InvalidTokenException e) {            log.error("토큰 유효성 검사 실패: {}", e.getMessage());            status = HttpStatus.UNAUTHORIZED; // 401            return new ResponseEntity<>(e.getMessage(), status);        } catch (Exception e) {            log.error("토큰 유효성 검사 실패: {}", e.getMessage());            status = HttpStatus.NOT_FOUND; // 400            return new ResponseEntity<>(e.getMessage(), status);        }    }}